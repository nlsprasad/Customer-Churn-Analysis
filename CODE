pip install pandas

! pip install matplotlib
! pip install seaborn
! pip install numpy


import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

df = pd.read_csv('/Users/sahithinaraharisetty/Downloads/CustomerChurn.csv')
df.head()

df.info()

# Replaced blanks with 0 as tenure is 0 and no total charges and changed the data type to float

df["TotalCharges"] = df["TotalCharges"].replace(" ", "0").astype(float)

df.info()

df.isnull().sum().sum()

df.describe()

df['customerID'].duplicated().sum()

# Converted 0 to no 1 to yes for senior citizens

def conv(value):
    if value == 1:
            return "yes"
    else:
        return "no"

df['SeniorCitizen'] = df["SeniorCitizen"].apply(conv)

df.head()

ax = sns.countplot(x = df['Churn'], data = df, hue = "Churn")

ax.bar_label(ax.containers[0])
plt.title("Count of Churn")
plt.show()

gb = df.groupby("Churn").agg({'Churn': "count"})
plt.pie(gb['Churn'], labels=gb.index, autopct="%1.2f%%")
plt.title("Percenatge of Churned Cx")
plt.show()

# 26.54% cutomers churned out. Now let's know why?

sns.countplot(x = "gender", data = df, hue = "Churn")
plt.title("Churn by Gender")
plt.show()

plt.figure(figsize = (4,4))
ax = sns.countplot(x = "SeniorCitizen", data = df)
ax.bar_label(ax.containers[0])
plt.title("Count of Customers by Senior Citizen")
plt.show()

# Calculate the count of 'Churn' for each 'SeniorCitizen' category
churn_counts = df.groupby(['SeniorCitizen', 'Churn']).size().unstack()

# Calculate the percentage by dividing each value by the total in the 'SeniorCitizen' group
churn_percentage = churn_counts.divide(churn_counts.sum(axis=1), axis=0) * 100

# Plot stacked bar chart
ax = churn_percentage.plot(kind='bar', stacked=True, width=0.8)

# Add labels and title
plt.title('Churn by SeniorCitizen (Percentage)')
plt.xlabel('SeniorCitizen')
plt.ylabel('Percentage')
plt.xticks([0, 1], ['No', 'Yes'], rotation=0)
plt.legend(title='Churn', labels=['No', 'Yes'], loc='upper left')

# Add percentage labels to each segment of the bars
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        # Get the x and y position for the label
        x = p.get_x() + p.get_width() / 2
        y = p.get_y() + height / 2
        # Display the percentage value
        ax.text(x, y, f'{height:.1f}%', ha='center', va='center', fontsize=10, color='white')

# Show plot
plt.show()

# A larger percentage of people in the Senior Citizen category have churned compared to those in the non-Senior Citizen category.

plt.figure(figsize = (11,5))
sns.histplot(x = "tenure", data = df, bins = 72, hue = "Churn")
plt.show()

# Customers who have been with us for a long time tend to stay, while those who have used our services for a shorter period are more likely to churn.

# 1 or 2 months have churned

ax = sns.countplot(x = "Contract", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
plt.title("Count of Customers by Contract")
plt.show()

# people who have month to month contract are likely to churn then from those who have 1 or 2 years or contract. 

df.columns.values

columns = ['PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 
           'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']

# Number of columns for the subplot grid (you can change this)
n_cols = 3
n_rows = (len(columns) + n_cols - 1) // n_cols  # Calculate number of rows needed

# Create subplots
fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, n_rows * 4))  # Adjust figsize as needed

# Flatten the axes array for easy iteration (handles both 1D and 2D arrays)
axes = axes.flatten()

# Iterate over columns and plot count plots
for i, col in enumerate(columns):
    sns.countplot(x=col, data=df, ax=axes[i], hue = df["Churn"])
    axes[i].set_title(f'Count Plot of {col}')
    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Count')

# Remove empty subplots (if any)
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

# Most customers who do not churn typically have services like PhoneService, InternetService (especially DSL), and OnlineSecurity enabled. In contrast, churn rates are significantly higher for customers who do not use or lack access to services such as OnlineBackup, TechSupport, and StreamingTV.

plt.figure(figsize = (6,4))
ax = sns.countplot(x = "PaymentMethod", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title("Churned Customers by Payment Method")
plt.xticks(rotation = 45)
plt.show()

# Customers who use electronic check as a payment method are more likely to churn.
